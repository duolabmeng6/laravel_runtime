name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    # 每周日凌晨2点UTC时间执行（北京时间周日上午10点）
    - cron: '0 2 * * 0'


env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:

        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push multi-arch images to Aliyun
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY

        # 启用 Docker 实验性功能以支持 manifest 命令
        export DOCKER_CLI_EXPERIMENTAL=enabled

        # 多架构镜像组处理
        declare -A multi_arch_groups
        declare -A temp_multi_arch_images
        current_group=""

        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi

            # 处理多架构组标记
            if echo "$line" | grep -q '^MULTI_ARCH_GROUP:'; then
                current_group=$(echo "$line" | sed 's/^MULTI_ARCH_GROUP://')
                echo "发现多架构组: $current_group"
                multi_arch_groups[$current_group]="true"
                continue
            fi

            # 只处理多架构组内的镜像
            if [[ -z "$current_group" ]]; then
                echo "跳过非多架构组镜像: $line"
                continue
            fi

            echo "处理多架构镜像: $line"
            docker pull $line

            # 获取平台信息
            platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            echo "平台架构: $platform"

            # 获取原始镜像名
            image=$(echo "$line" | awk '{print $NF}')

            # 根据原始镜像名生成目标镜像名（只将 / 替换为 -）
            # 分离镜像名和标签
            image_name_part=$(echo "$image" | cut -d':' -f1 | sed 's/\//-/g')
            image_tag_part=$(echo "$image" | cut -d':' -f2-)

            echo "镜像名部分: $image_name_part"
            echo "标签部分: $image_tag_part"

            # 创建临时标签
            temp_tag="${image_tag_part}-${platform//\//_}-temp"
            temp_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name_part}:${temp_tag}"
            target_image_name="${image_name_part}:${image_tag_part}"

            echo "docker tag $image $temp_image"
            docker tag $image $temp_image
            echo "docker push $temp_image"
            docker push $temp_image

            # 记录临时镜像（使用目标镜像名作为键）
            if [[ -z "${temp_multi_arch_images[$target_image_name]}" ]]; then
                temp_multi_arch_images[$target_image_name]="$temp_image"
            else
                temp_multi_arch_images[$target_image_name]="${temp_multi_arch_images[$target_image_name]} $temp_image"
            fi

            echo "开始清理磁盘空间"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="
            docker rmi $image
            echo "磁盘空间清理完毕"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="

        done < images.txt

        # 创建多架构镜像的 manifest
        for target_image_name in "${!temp_multi_arch_images[@]}"; do
            if [[ -n "${temp_multi_arch_images[$target_image_name]}" ]]; then
                echo "创建多架构镜像 manifest: $target_image_name"
                final_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$target_image_name"
                temp_images=(${temp_multi_arch_images[$target_image_name]})

                echo "docker manifest create $final_image ${temp_images[*]}"
                docker manifest create $final_image ${temp_images[*]}

                echo "docker manifest push $final_image"
                docker manifest push $final_image

                echo "多架构镜像 $target_image_name 创建完成"

                # 清理临时镜像
                for temp_img in ${temp_images[*]}; do
                    echo "清理临时镜像: $temp_img"
                    docker rmi $temp_img || true
                done
            fi
        done

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Aliyun Registry
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY

    - name: Find and build Docker images
      run: |
        # 遍历 mydocker 目录下的所有子目录
        for dir in mydocker/*/; do
          if [ -d "$dir" ]; then
            # 检查是否有 dockerfile 文件（不区分大小写）
            if [ -f "${dir}dockerfile" ] || [ -f "${dir}Dockerfile" ]; then
              # 获取目录名作为镜像名
              image_name=$(basename "$dir")
              echo "构建镜像: $image_name"
              
              # 进入目录构建镜像
              cd "$dir"
              
              # 构建镜像
              docker build -t $ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name:latest .
              
              # 推送镜像
              docker push $ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name:latest
              
              echo "镜像 $image_name 构建并推送完成"
              
              # 返回根目录
              cd ../../
            fi
          fi
        done